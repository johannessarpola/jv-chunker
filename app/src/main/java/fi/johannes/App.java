/*
 * This source file was generated by the Gradle 'init' task
 */
package fi.johannes;

import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

import static java.lang.System.exit;

public class App {
    public static void main(String[] args) throws IOException, InterruptedException {
        long statTime = System.currentTimeMillis();

        var cli = new ChunkyBoyoCli(args);
        var conf = cli.asConfiguration();

        var reader = ReaderBoyo.builder()
                .config(conf)
                .build();

        try (var ec = Executors.newFixedThreadPool(conf.executorSize)) {
            AtomicBoolean printCancelSignal = new AtomicBoolean(false);

            var splitters = reader.splitters();
            var progressBoyos = new ArrayList<ProgressBoyo>();
            var splitterJobs = new ArrayList<CompletableFuture<Void>>(splitters.size());
            // print on the side thread
            if (conf.verbose) {
                var printerBoyo = PrinterBoyo
                        .builder()
                        .cancelSignal(printCancelSignal)
                        .updateIntervalMs(50)
                        .progressBoyos(progressBoyos)
                        .build();
                CompletableFuture.runAsync(printerBoyo, ec);
            }

            for (var splitter : splitters) {
                var sf = CompletableFuture.runAsync(() -> {

                    var wbsf = FutureUtils.callableToCompletable(splitter, ec);
                    var splitProcess = wbsf.thenApply(writerBoyos -> {
                        // gather progressboyos
                        for (var wb : writerBoyos) {
                            progressBoyos.add(wb.getProgressBoyo());
                        }
                        return writerBoyos.stream().map(f -> FutureUtils.callableToCompletable(f, ec)).toList();
                    });

                    var v = splitProcess.join();
                    for (var f : v) {
                        f.join();
                    }

                });
                splitterJobs.add(sf);
            }

            splitterJobs.forEach(CompletableFuture::join);
            printCancelSignal.set(true);

            ec.shutdown();
            ec.awaitTermination(1, TimeUnit.MINUTES);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        Printer.println("Took %d ms", System.currentTimeMillis() - statTime);
        exit(0);

    }


}
